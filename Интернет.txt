				интернет, комманды:



1) ctrl + shift + c - Открывает html код сайта




2) http - Это протокол для взаимодествия с сервером можно отправлять туда запросы и получать иформации 
можно отправлять html, xml, документы и получаем из них ресурсы, скрипты, файлы, фотографии




3) Если мы в сайт в url пишем просто какой то домен(https://ru.wikipedia.org/wikipedia/) мы отправляем get запрос 
get - запрос отправляеться с url
status code:	200 - ok
GET / HTTP/1.1




4) Post запрос отправляеться с помощью login/регистрация/вход - это когда мы в сервер отправляем
post - запрос отправляеться с login/регистрация/вход
status code:	401 - Unathorized





5) API(aplication programming interface) - Это механизм, которые позволяют двум программным компонентам взаимодействовать друг с другом, используя набор определений и протоколов 





6) TCP(transmission control protocol) - это протокол управления передачей данных, который обеспечивает надежное соединение между устройствами в сети для обмена данными. TCP являеться одним из основных протоколов в семействе 
TCP/IP, которое используеться для взаимодействия устройств в интернете и локальных сетях.
TCP - медленная отправка, (но безопасная)


   UDP, TCP болле надежный, но медленее, чем. UDP(User Datagram Protocol), который не обеспечивает гарантии, доставки или очередности данных, но быстрее и проще.  TCP подходит для ситуйций, где важна надежность, а UDP - приложений, где важна скорость (например, потоковые видео или игры)

TCP - отправка - фото, файлы, видео

UDP - отправка - прямых эфиров или видео игр





7) Как отправить HTTP Запрос: 
Самый простой способ разобраться с протоколом HTTP — это попробовать обратиться к какому-нибудь веб-ресурсу вручную






8) URL(uniform Resource Locator) - унифицированный указатель ресурса - это то что отображаються в строке браузера, когда вы заходите на тот или иной сайт. URL - адрес есть не только у сайтов, но и у различных файлов (документов, изображений, видео и так далее), загруженных в Интернете
URL - (https://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D1%88%D0%BA%D0%B0)





9) URI(uniform  resource identifiers) - используеться для идентификации <<ресурсов>> в Интернете. Обычно они используеться в качестве целей запросов HTTP, в таком случае URI представляет местоположение физического ресурса такого как документ, фотография, двоичные данные
URI - https://ru.wikipedia.org/wiki/Животные/ - Животные это переход от основного сайта к другим частям сайта это и называеться URI




10) Коды:  
, 200 - Указывает, что запрос был успешным. СЕРВЕР отправил клиенту запрашиваемые данные.
ПРИМЕР - Мы открыли сайт, и страница загрузилась без ошибок 
200 - OK

, 304(Not Modified) - это код, ответа HHTP, который сообщает клиенту что запрашиваемый ресурс не был изменен с момента последнего запроса.


, 404 - Сервер не смог найти запрашиваемый ресурс. Это означает что запрашиваймый URL - адрес не существует на сервере
Пример: Мы пытаемься открыть страницу, которой нет, например, /nonexistent-page.
404  -  (Not Found)


, 403 - Доступ к запрашиваемому ресурсу запрщен. Это может произойти если у вас нет нужных прав или сервер настроен так, чтобы блокировать запрос
Пример: МЫ пытаемься открыть файл, который доступен только для авторизованных пользователей.
403 - Forbidden

, 500 - Внутреняя Ошибка сервера. Это означает, что сервер столкнулся с неожиданной ситуацией, из - за которой не смог обработать запрос 
Пример: Проблемы с кодом на сервере, например, неправильный синтаксис в скрипте.
500 - (Internal Server Error)



400 - эти статус коды зачастую говорят ошибка со стороны Frontend.

500 - эти статус коды зачастую говорят ошибка со стороны Backend.





11) Ctrl + r  - Перзагрузка Сервера (в сайте)







12) DNS-сервера - (domain name system-системма домменых имен) - Компьютерная распределанная система для получения информации о доменах. Чаще всего используеться для получения IP-адреса по имени хоста (компьютера или устройства)
DNS - нужен для того чтобы сопаставить домменое имя с (api-адресом) 


		


13) alt + tab - это переход в рабочей столе назад 





14) Usera-agent - приложения действующее со стороны пользователя. Веб-обозревателя, другие сервисы применяют его для предоставления своих данных, оформленных в виде строки. В основе приложения лежит файл со строками кодами, которые отвечают за индентификацию клиента




15) Домменое имя - Это название сайта, и доменные имена дают нам  DNS-сервера
ПРИМЕР:	https://m.mashina.kg/en/ 	-	 m.mashina - это домменое имя тоесть название сайта





16) API - Адрес сайта, пример:	(185.27.134.113), связанно с доменным именем пример:  senatorov.su






17) Пинг сайтов - чтобы спинговать какойто сайт нужно открыть командую строку (cmd)
Написать: ping <доммен сайта>, ping <api addres сайта>






18) nginx - это веб-сервер, который используеться для:
1) Обработки запросов от пользователей. Когда вы открываете сайт, Nginx передаёт вам веб страницы
2)Балансировка нагрузки Если у сайта много поситителей, Nginx распределяет нагрузку между серверами 
3) Обратного прокси. Он принимает запросы от пользователей и пересылает их другим серверам (например, для API)
4)Кэширования Ускоряет работу сайта, сохраняя данные, чтобы не генерировать их каждый раз заново
5) Безопасности. Nginx может фильтровать запросы и блокировать вредоносный трафик 
ОСНОВНЫЕ ЗАДАЧИ:

-Быстро обслуживать статические файлы (картинки, HTML, CSS, JS)
-Работать как "посредник" между клиентами и другими серверными приложениями

ПРИМЕР:
- У нас есть сайт на python (Django/flask). Nginx принимает запросы, а затем передаёт их вашему приложению, чтобы оно обработовало их.

АКТУАЛЬНОСТЬ NGINX:
-Высокая производительность
-Поддерживает милионы соединений одновреммено
-Используеться для крупных сайтов, таких как Netflix, YouTube, Instagram

 Пример от эмки:
-Пользователь делает запрос
-Nginx принимает запрос, передаёт его на кухню (сервер), получает ответ и возвращает его пользователю









19) Apache(Apache HTTP Server)  - это популярный веб-сервер, который используеться для размещения сайтов и приложений в интернет или локальной сети.

-Apache нужен для публикации данных и приложений в интернете он обрабатывает запросы, создаёт страницы и запускает приложения, чтобы пользователь мог их увидеть и использовать

ПРОСТО:

-Nginx - как посредник между клиентом и сервером 
-Apache - как инструмент для "выставления" ваших данных в интернет 

Nginx, Apache, IIS - это все веб серверы 







20) Андроид написан на LINUX 
Отправка Заголовков на сервер это очень важная штука Отправляеться через Network
и через заголовки отправляеться все, какой метод был, имя ноутбука, версия браузераи и операционная система (Windows).








21) Кто управяет и поддерживает DNS-сервера?
Когда мы вводим адрес интернет - ресурса в строку браузера он отправляет запрос на 
DNS-сервер отвечающий за корневую зону. Таких серверов 13 и они управляют различными операторами и организациям
-Мы не знаем какой сервер будет обрабатывать наш доммен - наш домен будет обработан один из 13 серверов 









22) Биты, Байты, килобайты, мегабайты,  гигобайты, терабайты:

1)Бит(bit)
* Это самая маленькая еденица измерения информации
*Может быть либо 0(false), либо 1(True)-(представляет два состояния: выключено(0) или включено(1) )


2)Байт(byte)
* 1 байт = 8 бит 
*Байт используеться для хранения одного символа, например, буквы "A" или цифры "1".

3) Килобайт (KB)
* 1 килобайт = 1024 байта.
* Это небольшие файлы, например, текстовые документы или картинки низкого качества 

4) Мегабайт (MB)
* 1 мегабайт = 1024 киллобайт
* Используеться для описания больших файлов, например, музыкальных треков или картинок высокого разрешения.

5)  Гигабайт (GB)
* 1 гигабайт = 1024 мегабайт 
* Это уже большие обьёмы данных, например, фильмы, игры, или приложения.

6) Терабайт (TB)
* 1 терабайт  = 1024 гигабайт
* Используеться для измерения огромных хранилиш, например, жёстких дисков или серверов.

ПРИМЕР:
*Один текстовый файл может занимать 1 КБ.
*Песня длительность 3 минуты занимает примерно 5 МБ.
*Фильм в высоком качестве - около 2-4 ГБ.
*Жёсткий диск компьютера может иметь обьём 1 TБ.

Иерархия: Бит --> Байт --> Килобайт --> Мегабайт --> Гигабайт --> Терабайт.





23) HTTPS(что такое в конце <S> ): HTTPS - это HTTP (протокол передачи данных в интернет) с дополнительной буквой S, которая означает: Secure(безопасный)
HTTPS использует шифрование данных с помощью протокола SSL/TLS, чтобы:
1)Зашишать информацию (например, пароли, банковские данные ) от перехвата.
2)Гарантировать подлинность сайта, подтвердая его безопасность с помощью сертификата.

ПРИМЕР:
* Когды мы вводим данные своей карты на сайте, HTTPS шифрует эту информацию чтобы никто ёё не украл.

* Сайты с HTTPS начинаються с https:// и показывают значок замка в адресной строке



 
HTTPS - может быть временным зашищенным с S его нужно вовремя обновлять (сертификат)
Если же мы в сайт заходим через http - протокол то наша операцияонная система выдаст нам тревогу(ошибку)
о том что сайт может быть опасным и вирусным для этого нужно заходить в https сайты





24) - DOMContentLoaded - Это сама верстка сайта (теги, html, css)




25) Веб Сервер - Это программа или устройство, которое принимает запросы от пользователей (через браузеры) и отправляет им данные, такие как веб-страницы, картинки или файлы 

ПРИМЕР:Вы вводите адрес сайта -> веб сервер получает запрос, обрабатывает его и возвращает страницу сайта вашему браузеру.
Примеры веб серверов: Nginx, Apache, IIS


26) веб сервер(IIS(internet information Services))  - Это веб сервер, разработанный компанией Microsoft. Он используеться для размещения и управления веб сайтами и веб приложениями на операционной системе  Windows


Пример Использования:
Если мы разрабатываем сайт на Windows Server , IIS - позволяет запустить его для пользователей интернета или локальной сети.

Отличие: IIS работает только на Windows, в отличие от Nginx и Apache, которые кроссплатформенные  


















			ПЕРЕВОДЫ на АНГЛИЙСКИЙ (Программистких Слов):

request - запрос 
responce - ответ
headers -  заголовки
get - получать
post - почта(отправлять)



























